{"pages":[],"posts":[{"title":"欢迎来到Astroblog！","text":"渊源本人2019年4月在华为云购买了一台云服务器。本来打算是为了给自己“未来要做的“微信小程序提供后端服务的，结果一直拖到8月份才购买了域名并完成了备案。在这之后一段时间内又没有新的小程序要做，于是这个服务器和域名便一直荒废了快大半年。由于大三上学期结束的非常之早，我人生中第一次拥有了将近两个月的寒假。趁此机会，我决定将这个服务器先利用起来，于是就有了Astroblog。 简介Astroblog上主要将包括以下内容： 在学校的课程总结，目前计划将总结的资料全部电子化（尽量，看心情😂） 与计算机技术相关的技术总结，比如一些教程或方法等，用作备忘，大致分为以下几类： 编程语言知识总结 计算机网络技术 程序开发 黑苹果 个人摄影作品以及其他优秀摄影作品的展览 一些民航知识 其他内容 关于Astrobear站长现在（2020年1月）是一个大三学生，专业是测控方向的。我从小的梦想是成为一名飞行员，但是高三体检被刷了😭。于是我迷迷糊糊就到了现在的学校，进了现在的专业。高中的时候加入了学校天文社，从那时起喜欢上了天文（摄影）。本渣在大一上学期学了C语言以后对计算机技术产生了兴趣，之后在“编程”的道路上越走越远。 总结一下，Astrobear是：学控制的梦想成为飞行员的天文和计算机爱好者。 由于我并不是计算机专业的，所以关于计算机技术这一块是本着“拿来主义”的态度去学的——会用就行。因此在这方面难免会有疏漏错误之处，也请大家海涵。 多亏有了互联网的发展，知识的传播可以如此地迅速。在此，对之前对我有过帮助的网友表示衷心的感谢！","link":"/2020/01/03/About/"},{"title":"Gallery","text":"Photos will continue to update…","link":"/2020/01/03/Gallery/"},{"title":"APIs of Multirotor in Airsim","text":"APIs of Multirotor in Airsimby Astrobear Preface All APIs listed below need to add the suffix .join(). Actually, .join() is a call on Python’s main process to wait for the thread to complete. All APIs listed below has a hidden parameter, which is vehicle_name. If you have more than one vehicle in the environment, please indicate the name of the vehicle that need to be operated clearly. This documention is still not very completed. If you have any advice or if you find any mistake, just comment at the end of the article. Control APIstakeoffAsync(timeout_sec): the multirotor will take off when this command is being executed. timeout_sec: take off time, second. Better to greater than 3s but less than 10s. hoverAsync(): the multirotor will maintain its attitude when executed. landAsync(timeout_sec): the multirotor will land when executed. timeout_sec: landing time, second. The default setting is 60s. If the altitude of the multirotor is too high, it may lose control and crash after the landing process lasting for more than 60s. It is recommended that you should make the multirotor descend to a reasonable altitude before starting the landing process. goHomeAsync(timeout_sec): the multirotor will fly back to its starting point automatically. timeout_sec: travel time, seconds. This process will end when the travel time is beyond the value whether the multirotor has reached the destination or not. The value of default setting is extremely big, thus we can let this parameter empty. moveByAngleZAsync(pitch, roll, z, yaw, duration): change the attitude of the multirotor and than change its movement. pitch: angle of pitch, radian. roll: angle of roll, radian. z: flight altitude, meter. Due to the NED coordinate system used in AirSim, the negative number means the positive altitude above the ground in reality. Similarity hereinafter. yaw: angle of yaw, radian. duration: the time for the multirotor to keep the given attitude, second. If there are no commands after duration time, the multirotor will maintain its previous given attitude and keep moving. You can use this API once again to set the multirotor to a horizontal attitude. However, it will still move due to the inertia. moveByAngleThrottleAsync(pitch, roll, throttle, yaw_rate, duration): change the attitude of the multirotor and than change its movement. pitch: angle of pitch, radian. roll: angle of roll, radian. throttle: throttle, ranges between 0 and 1. When the throttle is set to 0, the multirotor will lose its power and crash. Value 1 is its maximum power. yaw_rate: angular velocity at yaw axis, radian per second. duration: the time for the multirotor to keep the given attitude, second. The multirotor will automatically stop moving after duration time. moveByVelocityAsync(vx, vy, vz, duration, drivetrain, yaw_mode): change the velocity of the multirotor. vx: velocity projected at x axis, meter per second. vy: velocity projected at y axis, meter per second. vz: velocity projected at z axis, meter per second. duration: the time for the multirotor to keep the given velocity, second. If there are no command after duration time, the multirotor will maintain its previous given velocity and keep moving. If you want to stop it, you can use this API once again to set the velocity to zero. drivetrain: the default value is airsim.DrivetrainType.MaxDegreeOfFreedom, it can also be set as airsim.DrivetrainType.ForwardOnly. yaw_mode: the default value is airsim.YawMode(is_rate=True, yaw_or_rate=0.0), it can also be set as airsim.YawMode(is_rate=False, yaw_or_rate=0.0). Please notice that, under the default setting, the multirotor is not able to yaw when executing this command. moveByVelocityZAsync(vx, vy, z, duration, drivetrain, yaw_mode): change the velocity at horizontal plane and the altitude of multirotor. vx: velocity projected at x axis, meter per second. vy: velocity projected at y axis, meter per second. z: flight altitude, meter. duration: the time for the multirotor to keep the given velocity, second. If there are no command after duration time, the multirotor will maintain its previous given velocity and keep moving. If you want to stop it, you can use this API once again to set the velocity to zero. drivetrain: the default value is airsim.DrivetrainType.MaxDegreeOfFreedom, it can also be set as airsim.DrivetrainType.ForwardOnly. yaw_mode: the default value is airsim.YawMode(is_rate=True, yaw_or_rate=0.0), it can also be set as airsim.YawMode(is_rate=False, yaw_or_rate=0.0). Please notice that, under the default setting, the multirotor is not able to yaw when executing this command. moveOnPathAsync(path, velocity, timeout_sec, drivetrain, yaw_mode, lookahead, adaptive_lookahead): the multirotor will fly according to several given coordinates. path: a Vector3r array, which provides the route coordinates, meter. The form of it is [airsim.Vector3r(x, y, z), ...]. velocity: flight velocity when traveling, meter per second. timeout_sec: travel time, second. The process will end when the travel time is beyond the value whether the multirotor has reached the destination or not. The value of default setting is extremely big, thus we can let this parameter empty. drivetrain: the default value is airsim.DrivetrainType.MaxDegreeOfFreedom, it can also be set as airsim.DrivetrainType.ForwardOnly. yaw_mode: the default value is airsim.YawMode(is_rate=True, yaw_or_rate=0.0), it can also be set as airsim.YawMode(is_rate=False, yaw_or_rate=0.0). Please notice that, under the default setting, the multirotor is not able to yaw when executing this command. lookahead: the default value is -1. adaptive_lookahead: the default value is 1. moveToPositionAsync(x, y, z, velocity, timeout_sec, drivetrain, yaw_mode, lookahead, adaptive_lookahead): the multirotor will fly to given location when executed. After it reach the destination, it will automatically stop. x: distance projected at x axis, meter. y: distance projected at y axis, meter. z: flight altitude, meter. velocity: flight velocity when flying to the destination, meter per second. timeout_sec: travel time, second. The process will end when the travel time is beyond the value whether the multirotor has reached the destination or not. The value of default setting is extremely big, thus we can let this parameter empty. drivetrain: the default value is airsim.DrivetrainType.MaxDegreeOfFreedom, it can also be set as airsim.DrivetrainType.ForwardOnly. yaw_mode: the default value is airsim.YawMode(is_rate=True, yaw_or_rate=0.0), it can also be set as airsim.YawMode(is_rate=False, yaw_or_rate=0.0). Please notice that, under the default setting, the multirotor is not able to yaw when executing this command. lookahead: the default value is -1. adaptive_lookahead: the default value is 1. moveToZAsync(z, velocity, timeout_sec, yaw_mode, lookahead, adaptive_lookahead): the multirotor will vertically climb to the given altitude and automatically stop and maintain the altitude when reached. z: flight altitude, meter. velocity: flight velocity when flying to the destination, meter per second. timeout_sec: climbing time, second. The process will end when the climbing time is beyond the value whether the multirotor has reached the destination or not. The value of default setting is extremely big, thus we scan let this parameter empty. yaw_mode: the default value is airsim.YawMode(is_rate=True, yaw_or_rate=0.0), it can also be set as airsim.YawMode(is_rate=False, yaw_or_rate=0.0). Please notice that, under the default setting, the multirotor is not able to yaw when executing this command. lookahead: the default value is -1. adaptive_lookahead: the default value is 1. rotateByYawRateAsync(yaw_rate, duration): the multirotor will yaw at the given yaw rate. yaw_rate: yawing angular velocity, degree per second. duration: the time for the multirotor to keep the given yawing angular velocity, second. If there are no command after duration time, the multirotor will maintain its previous given yawing angular velocity and keep moving. If you want to stop it, you can use this API once again to set the yawing angular velocity to zero.","link":"/2020/01/15/AirSimMultirotorAPIs/"},{"title":"Summarize of Reinforcement Learning 2","text":"Markov process (MP)Markov process is a stochastic process that satisfies the Markov property, which means it is “memoryless” and will not be influenced by the history. MP is sometimes called Markov chain. However, their defination have some slight differences. We need to make two assumptions before we define the Markov process. The first assumption is that the state of MP is finite, and we have $s_i\\in S, i\\in1,2,…$ , where $|S|&lt;\\infty$. The second assumption is that the transition probabilities are time independent. Transition probabilities are the probability to transform from the current state to a given state, whcih can be written as $P(s_i|s_{i-1}), \\forall i=1,2,…$. Base on these two assumption, we can define a transition transform matrix: The size of $\\bf P$ is $|S|\\times |S|$ and the sum of each row of $\\bf P$ equals 1. Henceforth, we can define a Markov process using a tuple $(S,\\bf P)$. $S$: A finite state space. $\\bf P$: A transition probability. By calculating $S\\bf P$ we can get the distribution of the new state. Figure 1 shows a student MP example. Markov reward process (MRP)MRP is a MP together with the specification of a reward function $R$ and a discount factor $\\gamma$. We can also use a tuple $(S,\\bf P,\\mit R,\\gamma)$ to describe it. $S$: A finite state space. $\\bf P$: A transition probability. $R$: A reward function that maps states to rewards (real numbers). $\\gamma$: Discount factor between 0 and 1. Here are some explaintions. Reward functionWhen we are moving from the current state $s$ to a successor state $s’$, a reward is obtained depending on the current state $s$ (in reality we get the reward at $s’$ ). For a state $s\\in S$, we define the expected reward by $R(s)=\\Bbb E[r_t|s_t=s]$. Here we assume that the reward is time independent. $R$ can be represented as a vector of dimension $|S|$. HorizonIt is defined as the number of time steps in each episode of the process. An episode is the whole process of a round of training. The horizon can be finite or infinite. ReturnThe return $G_t$ is defined as the discounted sum of rewards starting at time $t$ up to the horizon H. We can calculate the return using $G_t=\\sum^{H-1}_{i=t}\\gamma^{i-t}r_i$. State value functionThe state value function $V_t(s)$ is defined as the expected return starting from state $s$ and time $t$ and is given by the following expression $V_t(s)=\\Bbb E[G_t|s_t=s]$. If the episode is determined, then the $G_t$ as well as $V_t(s)$ will remain unchanged. However, because every episode is a random process, the return and state value function will be different in different episodes. Discount factorWe design the discount factor for many reasons. The best reason among them I think is that, people always pay more attention to the immediate reward rather than the long-term reward. If we set $\\gamma &lt;1$, the agent will behave like a human more. We should notice that when $\\gamma=0$, we just foucs on the immediate reward. When $\\gamma=1$, we put as much importance on future rewards as compared the present. Figure 2 and 3 shows an example of how to calculate the return. It is significant to find out a value function while many problems of RL is how to get a value function essentially. Computing the value functionWe have three ways to compute the value function. Simulation. Through simulation, we can get the value function by averaing many returns of episodes. Analytic solution. We have defined the state value function $V_t(s)=\\Bbb E[G_t|s_t=s]$. Then, make a little transformation, see Figure 4 in detail. Then, we have $V(s)=R(s)+\\gamma \\sum P(s’|s)V(s’)$, $V=R+\\gamma\\bf P\\mit V$. Therefore we have $V=(1-\\gamma \\bf P\\rm )\\mit^{-1}R$. If $0&lt;\\gamma&lt;1$, then $(1-\\gamma \\bf P\\rm)$ is always invertible. However, the computational cost of the analytical method is $O(|S|^3)$, hence it is only suitable for the cases where the $|S|$ is not very large. Notice that $s’$ includes all the possible successor states. Here is an example in Figure 5. This example shows that how to calculate the value of the state represented by the red circle. Iterative solution. $V_t(s)=R(s)+\\gamma \\sum P(s’|s)V_{t+1}(s’), \\forall t=0,…,H-1,V_H(s)=0$. We can iterate it again and again and use $|V_t-V_{t-1}|&lt;\\epsilon$ ($\\epsilon$ is tolerance) to jduge the convergence of the algorithm. Markov decision process (MDP)MDP is MRP with the specification of a set of actions $A$. We can use a tuple $(S,A,\\bf P,\\mit R,\\gamma)$ to describe it. $S$: A finite state space. $A$: A finite set of actions which are available from each state $s$. $\\bf P$: A transition probability. $R$: A reward function that maps states to rewards (real numbers). $\\gamma$: Discount factor between 0 and 1. Here are some explanations. Notifications Both $S$ and $A$ are finite. In MDP, the transition probabilities at time $t$ are a function of the successor state $s_{t+1}$ along with both the current state $s_t$ and the action $a_t$, written as $P(s_{t+1}|s_t,a_t)$. In MDP, the reward $r_t$ at time $t$ depends on both $s_t$ and $a_t$, written as $R(s,a)=\\Bbb E[r_t|s_t=s,a_t=a]$. Expect for the value functions and what we have mentioned in this section, other notions are exactly the same as MRP. PolicyBefore we mention the state value function, we need to talk about the policy for the MDP first. A policy specifies what action to take in each state, which is actually a probability distribution over actions given the current state. The policy may be varying with time, especially when the horizon is finite. A policy can be written as $\\bf \\pi\\mit(a|s)=P(a_t=a|s_t=s)$. If given a MDP and a $\\pi$, the process of reward satisfies the following two relationships: $P^\\pi(s’|s)=\\sum_{a\\in A}\\pi(a|s) P(s’|s,a)$ When we have a policy $\\pi$, the probability of the state transforms from $s$ to $s’$ equals to the sum of a series probabilities. These probabilities are the production of the probability to execute a specific action $a$ under the state $s$ and the probability of the state transforms from $s$ to $s’$ when executing an action $a$. $R^\\pi(s)=\\sum_{a\\in A}\\pi(a|s)R(s,a)$ When we have a policy $\\pi$, the reward of the state $s$ is the sum of the product of he probability to execute a specific action $a$ under the state $s$ and all rewards that the action $a$ can get under the state $s$. Value functions in MDP (Bellman expectation equations)Given a policy $\\pi$ can define two quantities: the state value function and the state-action value function. These two value functions are both Bellman expectation equations. State value function: The state value function $V^\\pi_t(s)$ for a state $s\\in S$ is defined as the expected return starting from the state $s_t=s$ at time $t$ and the following policy $\\pi$, and is given by the expression $V^\\pi_t(s)=\\Bbb E_\\pi[G_t|s_t=s]=\\Bbb E_\\pi[R_{t+1}+\\gamma V_\\pi (s_{t+1})|s_t=s]$. Frequently we will drop the subscript $\\pi$ in the expectation. State-action value function: The state-action value function $Q^\\pi_t(s,a)$ for a state $s$ and action $a$ is defined as the expected return starting from the state $s_t=s$ at time $t$ and taking the action $a_t=a$ that has nothing to do with the policy, and then subsequently following the policy $pi$, written in a mathmatical form $Q^\\pi_t(s,a)=\\Bbb E[G_t|s_t=s,a_t=a]=\\Bbb E[R_{t+1}+\\gamma Q_\\pi (s_{t+1},a_{t+1})|s_t=s,a_t=a]$. It evaluates the value of acting the action $a$ under current state $s$. Now let’s talk about the relationships between these two value functions. Figure 6 shows the actions that an agent can choose under a specific state, the white circle represents the state while black circles represent actions. We can discover that the value of a state can be denoted as $V^\\pi(s)=\\sum_{a\\in A}\\pi(a|s)Q_\\pi(s,a)$. In a similar way, Figure 7 shows what states that an action can lead to. We can also find that $Q_\\pi(s,a)=R(s,a)+\\gamma\\sum_{s’\\in S} P(s’|s,a)V^\\pi(s’)$. On the right-hand side, the first part is the value of the state $s$, the second part is the sum of the product of the value of new state $s’$ and the probability of getting into that new state. If we combine the two Bellman equation with each other, we can get $V^\\pi(s)=\\sum_{a\\in A}\\pi(a|s)[R(s,a)+\\gamma\\sum_{s’\\in S}P(s’|s,a)V^\\pi(s’)]$ ​ $=R(s’,\\pi(s’))+\\gamma\\sum_{s’\\in S}P(s’|s,\\pi(s)) V^\\pi(s’)$, and $Q_\\pi(s,a)=R(s,a)+\\gamma\\sum_{s’\\in S} P(s’|s,a)\\sum_{a\\in A}\\pi(a’|s’)Q_\\pi(s’,a’)$. The example in Figure 8 shows that how to calculate the state value of the state represented by the red circle. Notice that actions $Study$ and $Pub$ have the same probabilities $\\pi(a|s)$ to be executed, which means they are all $0.5$. Optimality value function (Bellman optimality equation) Optimality state value function $V^*(s)=\\tt max\\mit V^\\pi(s)$ indicates a state value function generated by a policy that makes the value of state $s$ the biggest. Optimality state-action value function $Q^*(s,a)=\\tt max\\mit Q_\\pi(s,a)$ indicates a state-action value function generated by a policy that makes the value of the state-action $(s,a)$ the biggest. Optimality value function determines the best performance of a MDP. When we know the optimality value function, we know the best policy and the best value of every state, and the MDP problem is solved. Solving an optimality value function require us to solve the best policy at first. Find the best policyThe best policy is defined precisely as optimal policy $\\pi^ *$ , which means for every policy $\\pi$, for all time steps, and for all states $s\\in S$ , there is $V_t^{\\pi^ *}(s)\\geq V_t^\\pi(s)$. For an infinite horizon MDP, existence of an optimal policy also implies the existence of a stationary optimal policy. Although there is an infinite horizon, we still just need to search finite policies, which equals $|A|^{|S|}$. Moreover, the optimal policy might not be unique. We can compute the optimal policy by $\\pi^*(s)=\\tt argmax\\mit V^\\pi(s)$, Which means finding the arguments ($V(s),\\pi(s)$) that produce the biggest value function. If an optimal policy exists then its value function must be a fixed point of the operator $B^*$. Bellman optimality backup operatorBellman optimality backup operator is written as $B^*$ with a value function behind it $B^*V(s)=\\tt max_a \\mit R(s,a)+\\gamma\\sum_{s’\\in S}P(s’|s,a)V(s’)$. If $\\gamma&lt;1$, $B^*$ is a strict contraction and has a unique fixed point. This means $B^*V(s)\\geq V^\\pi(s)$. Bellman operator return to a new value function and it will improve the value if possible. Sometimes we will use $BV$ to replace Bellman operator and substitute the $V$ on right-hand side of the equation. Next I’ll briefly introduce some algorithms to compute the optimal value function and an optimal policy. Policy searchThis algorithm is very simple but acquires a great number of computing resources. What it do is just trying all the possible policies and find out the biggest value function, return a value function and a policy. Policy iterationThe algorithm of policy iteration is shown below: while True do ​ $V^\\pi$ = Policy evaluation $(M,\\pi,\\epsilon)$ ($\\pi$ is initialized randomly here) ​ $\\pi^*$ = Policy improvement $(M,V^\\pi)$ if $\\pi^*(s)=\\pi(s)$ then ​ break else ​ $\\pi$ = $\\pi^*$ $V^*$ = $V^\\pi$ . Policy evaluation is about how to compute the value of a policy. As for policy improvement, we need to compute $Q_{\\pi i}(s,a)=R(s,a)+\\gamma\\sum_{s’\\in S} P(s’|s,a)V^{\\pi i}(s’)$ for all the $a$ and $s$ and then take the max return $\\pi_{i+1}=\\tt argmax\\mit Q_{\\pi i}(s,a)$. Notice that there is a relationship $\\tt max\\mit Q_{\\pi i}(s,a)\\geq Q_{\\pi i}(s,\\pi_i(s))$. This means the agent may adopt the new policy and take better actions (greater) or it just take actions following the former policy (equal). After the improvement the new policy will be monotonically better than the old policy. At the same time, once the policy converge it will never change again. Value iterationThe algorithm of value iteration is shown below: $V’(s)=0, V(s)=\\infty$, for all $s\\in S$ while $||V-V’||_\\infty&gt;\\epsilon$ do ​ $V=V’$ ​ $V’(s)=\\tt max\\mit_aR(s,a)+\\gamma\\sum_{s’\\in S}P(s’|s,a)V’(s)$, for all states $s\\in S$ $V^*=V$, for all $s\\in S$ $\\pi^ *=\\tt argmax_{a\\in A}\\mit R(s,a)+\\gamma\\sum_{s’\\in S}P(s’|s,a)V^ *(s’),\\ \\forall s\\in S$ . The idea is to run fixed point iterations to find the fixed point $V^* $ of $B^ *$.","link":"/2020/01/18/RLSummarize2/"},{"title":"Summarize of Reinforcement Learning 1","text":"PrefaceThis blog is the first one of my series of blogs that summary the key points of reinforcement learning, other blogs will be updated recently according to my learning progress. These series of blogs of mine are mostly based on the following works and I’m really grateful to the contributors: Online courses of Stanford University CS234: Reinforcement Learning, Emma Brunskill and the notes. Blogs of 从流域到海域. Blogs of 叶强. If you find any mistake in my articles, please feel free to tell me in comments. What is reinforcement learning (RL)?RL is a kind of machine learning method that mainly focuses on the interaction between the agent (subject) and the model (environment, world). Through this interaction, the agent can gain experience and then have a better performance in some specific aspects. For example, a robot player can get a high score in a game after being trained by using RL method, or we can make the autopilot of the car to control it keep its lane and drive to the destination smoothly without any collision. A RL agent may interact with the world, and then recieve some feedback signal for each interaction. By jduging whether the feedback signal is good (beneficial to the agent’s desire performance) or not, the agent can then change its way interacting with the world (make better decisions) in order to reach the best performance. By accumulating these experiences, the agent can become more and more “smarter” and has a better performance. Some basic notions of RLBecause in the real world, we make decisions in a sequence in a period. Therefore, we need to introduce “time” to clearly indicate the quantities related to the agent at the specific position on the time axis. The notation with subscript “t” means time it is in a time sequence. Agent: The subject of RL, it is agent that interact with the world. Model: The world, the environment, the agent stays in the model. Reward: $ {r_t} $ , the feedback signal from the model, agent recieves the reward. The reward can have different values according to the different states of the agent. State: ${s_t}$ , the state of the agent. The state can be either finite or infinite, and it is set by people. Action: ${a_t}$ , the movement of the agent in the model, actions are different under different states. Observation: ${o_t}$ , the agent need to observe its state and determine the reward. History: a sequence of action, reward, observation, which is: $h_t=(a_1,o_1,r_1,…,a_t,o_t,r_t)$. Sequential Decision Making: make decision base on the history, that is: $a_{t+1}=f(h_t)$. Figure 1.1 shows how an agent interact with its world. How to model the world?Markov Property$P(s_{t+1}|s_t,a_t,…,s_1,a_1)=P(s_{t+1}|s_t,a_t)$ Left-hand side is called the transition dynamics of the world, whcih means the probability distribution over $S$. In RL, we often use this assumption. A model consists of the two elements below. Transition dynamics $P(s_{t+1}|s_t,a_t)$The probability of a specific state in the next timestep. Because an agent always has many states, $P$ is often a matrix. The dimension of $P$ denpends on the dimension of the state space. Reward function $R(s,a)$Usually, we consider the reward $r_t$ to be received on the transition between states, $s_t\\rightarrow{s_{t+1}}$. A reward function is used to predict rewards, which can be written in the form $R(s,a)=\\Bbb E[r_t|s_t=s,a_t=a]$. How to make a RL agent?Let the agent state be a function of the history, $s_t^a=g(h_t)$. An agent often consists the three elements below. Policy $\\pi(a_t|s_a^t)$Policy is a mapping from the state to an action, which means we can determine the action through the policy if we know the state. Please notice that the policy we mention here is stochastic. When the agent want to take an action and $\\pi$ is stochastic, it picks action $a\\in A$ with probability $P(a_t=a)=\\pi(a|s_t^a)$. Value function $V^\\pi$If we have discount factor $\\gamma\\in [0,1]$, which is used to weigh immediate rewards versus delayed rewards, value function is an expected sum of discounted rewards $V^\\pi=\\Bbb E_\\pi[r_t+\\gamma r_{t+1}+\\gamma ^2 r_{t+2}+…|s_t=s]$. ModelThe agent in RL may have a model. I have introduced how to make a model in section 3. Three questions we are facingDo we need exploration or exploitation?In RL, the agent must be able to optimize its actions to maximize the reward signal it receives. We have 2 ways to achieve this target, the first is to let the agent exploit what it already knows, the second is to explore the world where is unknown for the agent. This leads to a trade-off between exploration and exploitation. Can the agent generalize its experience?In actual world, the agent often has infinite states. However, it is impossible for us to include all of them in RL. Can the agent learn whether some actions are good or bad in previously unseen states? Delayed consequencesThe action executed by the agent may let it recieve high reward at present state. However, this action may have negative effects in the future. Or we can also ask, if the rewards are caused by the action the agent just took or because of the action taken much earlier? What’s next?Now we have known the basic frame and its components of reinforcement learning. But what is the exact form of the transition dynamics, reward function, policy, value function? And what’s the relationship between these functions? How can I use these functions to make an agent? We will discuss these questions in the next chapter.","link":"/2020/01/17/RLSummarize1/"},{"title":"HP Envy-13 ad024TU黑苹果安装总结","text":"请先了解以下内容本文主要介绍在完成黑苹果的基本安装以后的完善过程。对于黑苹果完全没有概念的朋友，请看这篇文章。而本文是在很早的时候开始写的，并在原基础上不断增添了内容。那时候作者还未对EFI做足够的优化，因此本文在现在看来有一些过时。假如你遇到了文章中出现的类似情况，希望可以给你提供一些解决思路。但是一般来说，如果你的机型和硬件与我的相同且使用了我提供的EFI的话，基本安装完成以后机器就已经是几乎完美的一个状态了，只需要做很少的优化即可。 作者电脑的EFI存放于这个Github仓库中：HackintoshForEnvy13-ad0xx。 作者电脑型号为HP Envy-13 ad024TU，其中部分文件不建议大家直接用于其他型号的电脑。若使用本仓库中文件导致系统故障或崩溃，作者本人概不负责。 作者电脑的网卡和硬盘均作了更换。故即使机型相同，直接套用此EFI依旧可能会产生问题，请知照！ 此EFI一开始是来自于交流群中来源不明的Envy-13通用EFI，里面的内容杂乱无章而且有很多不必要的驱动和补丁，但还是可以将机器驱动起来。经过大半年的维护，我对其中的内容作了一些精简，但是其中的方法依旧相对落后和杂乱。现在的这个EFI基本上是基于SlientSliver的HP-ENVY13-ad1XX-Hackintosh修改而来，保留了其中的hotpatch部分，更改了一些驱动和补丁。特此鸣谢！ 关于本机的功能： CPU：可以正常变频 电源：节能五项似乎没有完全加载，但是电池电量显示正常，使用上没有障碍 显卡：仿冒的Intel HD Graphics 520，ig-platform-id为0x19160000，驱动原生显卡Intel HD Graphics 620会产生非常诡异的色阶断层，严重影响观感 睡眠：正常，以前曾有过睡眠唤醒掉蓝牙的问题，现在已经解决 声音：使用的LayoutID为03，只能驱动底面的扬声器，对于这款笔记本电脑来说，两个扬声器和四个扬声器听起来并无什么差别，对音质有追求的请直接外接蓝牙音响或者使用耳机，插入耳机后音量可以自动调节为之前的设置值 网卡和蓝牙：原配网卡无法使用，我更换为DW1560，没有故障出现，Airdrop和HandOff都可以正常使用，可以连接AirPods听音乐并且功能完整 触控板：加载了白苹果手势，但除了四指手势和力度感应之外其他手势都可以用 亮度调节：可调，但是档位间隔不大，最低档位的时候屏幕还是较亮 USB接口：四个接口均可正常使用 摄像头：可用 读卡器：无法驱动，有需要的建议使用读卡器 声明：仓库中所有文件均可供个人用途和技术交流使用，在转载时请务必标明出处。不得将此仓库中的任何文件用于任何商业活动！ 基本安装过程中的一些问题这部分不是主要内容，但还是讲两句吧。 进入不了安装界面： 首先请确认你安装镜像中的EFI是适用于你的电脑型号的。如果还是不行，请在Clover中的Option选项中选择-v以啰嗦模式启动，这样启动的时候会显示出详细的信息。将最后出现的报错信息拍下来或者整个启动过程录制下来以后，找网友求助吧。 安装macOS 10.15的过程中，在啰嗦模式中出现如下图所示报错： ​ 请在Clover中打上如图所示的这个补丁。 进入安装界面且开始安装一段时间后，无法继续安装： 请重新下载镜像，在下载完成以后检查镜像的md5值是否正确。如正确，再制作你的镜像U盘。 对于10.14.x的镜像进入安装界面后提示应用已经损坏，无法安装： 请将你的bios时间往前调整至2019年10月25日以前，但是不要调整得太久远。这是因为旧的镜像中的证书会在上述时间以后过期导致无法安装。 后续完善中的一些问题在安装完成以后，便可以进入系统了。但是这个时候的系统还是非常不完善的，需要做很多调整。进入系统后，先在 关于本机-系统报告中检查各个硬件项目是否被成功驱动，然后再根据没有成功驱动的项目，安装相对应的驱动或者打必要的补丁。但是前文说过：如果你的机型和硬件与我的相同且使用了我提供的EFI的话，基本安装完成以后机器就已经是几乎完美的一个状态了，只需要做很少的优化即可。 如果使用的是与作者相同型号的电脑（型号完全一致，且未更换过任何硬件），以下项目是有故障的 网卡未被驱动，无法上网 蓝牙未驱动，无法使用蓝牙 Siri, iMessage, FaceTime, HandOff无法使用 以下项目有可能出现故障： 声卡未驱动，没有声音，也无法录音 无法调节显示器亮度，在系统偏好设置中也没有调节亮度的拖动条 触控板未被驱动，无法使用触控板 因此，仅仅完成了系统的安装是远远不够的。此时我们的电脑还无法被称为生产力工具。下面就介绍一些解决故障的办法以及系统优化的办法。 首先应当获取软件安装权限，只有在此以后你才可以安装非App Store下载的，或者由非受信任的开发者开发的软件： 在终端中输入：sudo spctl --master-disable 建议安装的软件： Clover Configurator：用于修改Clover的配置文件config.plist Hackintool：功能强大的黑苹果配置工具 Kext Utility：用于重建缓存 CPU-S：用于测试CPU变频档位 MaciASL：用于修改SSDT 这些软件可以通过这个百度云链接下载。密码：57qf。 机型选择： 使用Clover Configurator打开config.plist，确保在机型设置中选择MacBook Pro 14,1。关于机型的选择，原则上是需要将你的电脑的集成显卡的型号与所选机型的集成显卡型号对应起来的，否则无法驱动你的显卡。具体的选择参见：黑苹果必备：Intel核显platform ID整理及smbios速查表。 驱动的正确安装方法： 如果驱动没有正确安装，有极大的可能性会导致重启之后无法进入系统。作者本人就在这个问题上吃了很大的亏。关于驱动的安装，分为两种情况。 操作的是/EFI/CLOVER/kexts/Other中的驱动文件。对于这种情况，不需要重建缓存。 操作的是/Library/Extensions或者/System/Library/Extensions中的驱动文件。如果操作的是这个两个文件夹中的驱动文件，则需要重建缓存。可以通过Kext Utility软件或者使用终端命令行来重建缓存。 重建缓存的命令：sudo kextcache -i /。 关于网络： 对于使用安装了Intel（或者其他某些品牌）的网卡的电脑的朋友们，进入黑苹果系统以后网卡是没有驱动的，也就是说这个时候电脑是没有办法上网的。若是电脑安装了某些型号的免驱网卡，在macOS系统下电脑就可以直接连接网络。一般来说，如果不想拆机，可以使用USB网卡。但是使用USB网卡无法使用Siri, iMessage, FaceTime, HandOff等功能。 对于Intel的网卡，目前在macOS下是没有很好的办法驱动的。但是情况也在发生着一些改变。最近远景论坛已经有大佬写出了Intel网卡的驱动，但是还是存在一些问题。有兴趣的可以看看他的GitHub项目里面有没有支持你的网卡的型号：IntelBluetoothFirmware。 对于网络的问题，可以使用USB网卡。或者直接将电脑的网卡拆下并更换为可以使用的免驱网卡。关于免驱网卡型号的选择，可以参考这个网站：黑苹果建议的无线网卡 Hackintosh Compatible WiFi(20190505增加无线路由器推荐)。 当安装了合适的网卡以后，电脑便可以上网了。这个时候，这台电脑才基本可以投入使用。 关于BCM94352Z(DW1560)： 作者使用的就是这种无线网卡。这个网卡是Wi-Fi和蓝牙二合一无线网卡。该网卡的无线局域网功能在macOS和Windows系统下都是免驱的。但是这个网卡在macOS下要驱动蓝牙需要三个驱动文件，分别为：AirportBrcmFixup.kext，BrcmFirmwareData.kext，BrcmPatchRAM3.kext。将这些驱动文件放入/EFI/CLOVER/kexts/Other下。注意，该目录下还应当存在Lilu.kext，否则驱动文件无法正常工作（仓库中提供的EFI文件夹中都已包含这些驱动文件了）。 作者的电脑一度出现了电脑睡眠唤醒后蓝牙失效的情况，并被这个问题困扰了很久。一开始是参考了Broadcom BCM94352z/DW1560驱动新姿势[新方法]中的方法，但是问题并没有得到根本解决。之后在/EFI/CLOVER/kexts/Other中加入了ACPIDebug.kext，将电脑hibernatemode的值调整为0，并在蓝牙偏好设置-高级选项中取消勾选允许蓝牙设备唤醒这台电脑后，也没有解决该问题。然后作者尝试重新订制USB驱动来解决这个问题，但是还是没有能够解决这个问题。 最后，作者更换了最新的蓝牙驱动，才最终完美解决了这个问题。需要注意的是，有时在睡眠唤醒之后，蓝牙图标会短暂的显示为失效状态，然后回复正常。 在Windows系统下，可以自行安装驱动人生软件来安装蓝牙的驱动。 目前市面上DW1560的价格在300元左右。实话说，这个价格完全是因为黑苹果这边的需求炒起来的。而同时社区中也有其他网卡的解决方案，除了上文所提到过的驱动还开发中的部分Intel网卡之外，DW1820是另一个价格相对低廉的选择。但是根据社区中的反馈，DW1820的表现并不是特别稳定，有可能会出现各种奇怪的问题。因此，作者建议还是直接购买DW1560比较好，一步到位，省了各种折腾和闹心。另外，你也可以购买Mac上的拆机网卡或者DW1830，后者的价格在500元左右，速度比DW1560更快。 关于睡眠： 请打开Hackintool软件，并切换到电源一栏。再点击红框中的按钮，使得电源信息中红色的两行变为绿色。此操作可能可以解决一些睡眠问题。 定制USB驱动： 定制USB驱动有可能可以帮助解决一些睡眠上的问题，其操作步骤也十分简单，所以博主强烈推荐大家还是定制一下。在此处附上订制USB驱动的教程：Hackintool(Intel FB Patcher) USB定制视频。需要注意的是，你有可能发现在使用了USBInjectALL.kext以后仍有端口无法加载/检测不到。你可以尝试在Clover的config.plist中添加下列解除USB端口数量限制补丁来解决这个问题。 123456789Comment: USB port limit patch #1 10.15.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FComment: USB Port limit patch #2 10.15.x modify by DalianSkyName: com.apple.driver.usb.AppleUSBXHCIFind: 83F90F0FReplace: 83F93F0F 开启HiDPI使屏幕看起来清晰： 在终端中输入：sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi-zh.sh)&quot;，再按提示操作即可。 详情请见：HiDPI是什么？以及黑苹果如何开启HiDPI。 打开SSD Trim： 在终端中输入：sudo trimforce enable，然后输入y再回车，重复一次，电脑将自动重启。需要注意的是，使用原装SSD的朋友请不要打开这个功能，这会导致你的电脑在macOS下非常卡顿，几乎无法操作。 电脑卡顿的解决办法： 在刚安装完黑苹果后，系统大概率会出现极为卡顿的情况。这种卡顿主要表现在：鼠标移动卡顿、动画严重掉帧、开机速度以及应用打开速度很慢、系统资源大量占用、电脑发热严重、无法正常关机。这些问题有的时候不太明显，有的时候则令电脑根本无法使用。上述问题有时在让电脑睡眠一段时间之后重新唤醒即可得到改善，但是无法根本解决。 出现上述问题的根本原因就在于本型号电脑所使用的SSD——Intel SSDPEKKF360G7H对macOS的兼容并不好。若要正常使用该SSD的话必须在/EFI/CLOVER/kexts/Other中添加HackrNVMeFamily.kext。你可以在GitHub仓库文件主目录下的kext文件夹中找到这个驱动。在添加了这个驱动之后，系统的卡顿现象可以得到非常明显的改善，基本上做到了流畅运行，但是偶尔还是会有些许卡顿。 解决这个问题最根本的方法还是更换SSD。作者的SSD已经更换为西部数据的SN500，故在EFI文件夹中删除了这个驱动文件。 电脑无法调节屏幕亮度的解决办法： 一般情况下不会出现这样的情况，但是如果发生了，使用Kext Utility重建缓存后重启即可。 关于本机的VoodooPS2Controller.kext： 在更换了EFI的hotpatch方法以后，最新版本的VoodooPS2Controller.kext已经可以正常使用。注意，新版本的VoodooPS2Controller.kext需要配合VoodooInput.kext使用。下面所说的定制VoodooPS2Controller.kext的内容已经过时，但此处仍加以保留，你可以根据自己的喜好按需使用。 旧版本的VoodooPS2Controller.kext存放于GitHub仓库文件主目录下的kext文件夹中，它双指手势只支持上下左右滑动，三指手势在修改后实现了下表所述功能。它与新版驱动相比，优点在于：十分稳定，三指手势的识别成功率几乎达到100%，并且双指轻触十分灵敏。 为迎合macOS调度中心默认的键位，我将该驱动的三只滑动手势的键盘映射作了些许调整，其对应关系如下表： 手势 原本对应的快捷键 修改后的快捷键 功能 三指上滑 ⌘+ˆ+↑ ˆ+↑ 调度中心 三指下滑 ⌘+ˆ+↓ ˆ+↓ App Exposé 三指左滑 ⌘+ˆ+← ˆ+→ 向右切换一个全屏页面 三指右滑 ⌘+ˆ+→ ˆ+← 向左切换一个全屏页面 触控板没有反应的情况： 一开始我以为是相关驱动没有成功加载的缘故，但是后来发现这是因为触控板被误锁定了。按下电脑键盘右上角的prt sc键可以锁定/解锁触控板。 关于CPUFriend.kext： 该驱动文件用于实现CPU的变频功能。由于该驱动程序只能根据用户个人的电脑定制，所以请不要直接使用仓库EFi文件夹中所提供的驱动文件。具体安装方法参见：利用CPUFriend.kext实现变频。 安装完成后，可以使用CPU-S来检测自己电脑的变频档位。 打开原生的NTFS读写功能： 该操作有一定风险，是否需要开启请自行判断。 在macOS的默认状态下，NTFS格式的磁盘是只能读不能写的。但是我们可以将隐藏的功能打开，从而可以对该格式的磁盘进行写操作，详情参考这个链接：macOS打开原生的NTFS读写功能。 如果你对NTFS格式的磁盘读写功能有刚需，也有很多相关的软件可供选择。此处略去不表。 修复Windows和macOS下时钟不同步的问题： 对于安装了双系统的电脑，在从macOS切换回Windows之后会发现Windows的系统时间与当前时间不符。解决这个问题的办法是：在Windows下，打开CMD输入下面的命令后回车。 Reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1。 关于显卡platform-id的选择： 本机的显卡就是Intel HD Graphics 620，是属于7代Kaby Lake平台的，其platform-id为0x5916000，对应机型为MacbookPro 14,2。但是经过本人实践发现，如果注入的是HD 620的id，系统显示器输出的帧缓冲深度(Framebuffer depth)为诡异的30位，这对应的是10位的显示器。由于电脑显示器本身为8位的，因此10位的颜色输出会导致高斯模糊和半透明的画面出现严重的色阶断层（色带）。一开始我以为是显示器EDID不匹配的问题，但是经过搜索发现，在Kaby Lake平台上，这个问题是因为显卡platform-id选择得不对，应该是需要仿冒6代Sky Lake平台的Intel HD Graphics 520才可以得到正确的24位的帧缓冲深度输出，如下图所示。 关于这个问题的具体内容和解决方法可以参看这个网页。 至此，黑苹果的安装和完善就差不多结束了。现在可以登陆iCloud以及其他苹果服务，并安装自己需要的软件了。 附：博主电脑配置 型号 HP Envy-13 ad024TU CPU Intel Core i7-7500U(2.7GHz) RAM 8GB DDR4 显卡 Intel HD Graphics 620 硬盘 Intel SSDPEKKF360G7H 360G （已更换为WD SN500） 网卡 Intel 7265NGW（已更换为DW1560） 声卡 ALC295","link":"/2020/02/14/HP_Envy-13_ad024TU_Hackintosh/"},{"title":"Python学习笔记","text":"这篇文章主要记录本人在学习Python时遇到的坑以及这个语言的一些特性，内容以时间顺序整理，比较零散杂乱。对于从零开始的同学，请参考官方文档Python 3.8.1 中文文档或其他网络上的教程。本文章将持续更新。 19/9/14 注释方法：#（一行注释），“”“ ”“”（多行注释） for循环：for （变量） in （范围），范围可以用range函数 Input函数的输入是char类型的 //是整除运算 逗号不可以用来分隔语句 使用缩进（4个空格）来代替C/C++中的大括号 19/9/15 for...in循环中，_可以作为循环变量，这时候仅循环指定次数，而不需要关心循环变量的值；事实上，_是一个合法的标识符，如果不关心这个变量，就可以将其定义成这个值，它是一个垃圾桶 定义函数时，使用函数名(*参数名)的定义方式， * 代表函数的参数是可变参数，可以有0到多个参数 一个文件代表一个模块(module)，若在不同的模块中含有同名函数，那么可以通过import导入指定的模块中的函数，如from 模块 import 函数，或者import 模块 as 自定义模块名称，再通过自定义模块名称.函数的方式调用 __name__是Python中一个隐含的变量，代表了模块的名字，只用直接执行的模块的名字才是__main__ 可以使用global指定使用的是一个全局变量，如果全局变量中没有找到对应的，那么会定义一个新的全局变量 嵌套作用域：对于函数a内部的函数b而言，a中定义的变量对b来说是在嵌套作用域中的，若要指定修改嵌套作用域中的变量，可以使用nonlocal指示变量来自嵌套作用域 pass是一个空语句，只起到占位作用 可以定义一个main函数（或者与模块名字相同的函数），再按照if __name__ = '__main__'的格式使脚本执行 19/9/17 与字符串有关的函数的调用方式为：字符串名称.字符串操作函数()，在此时字符串是一个对象，字符串操作函数的作用是向字符串对象发送一个消息 字符串实质上是一个数组，可以进行下标运算 字符串切片可以在下标运算中使用冒号进行运算，[起始字符:结束字符:间隔]，若不定义起始与终止字符，则默认为整个字符串，当间隔为负值时，以为着切片操作反向 字符串的索引为负值时，意味着索引从右到左数 列表可以理解为一个数组，其操作与字符串类似 可使用sorted函数对列表进行排序 可以使用生成式语法创建列表：f = [x for x in range(1, 10)]（此方法在创建列表后元素已经准备就绪，耗费较多内存），或f = (x for x in range(1, 10))（此方法创建的是一个生成器对象，需要数据时列表通过生成器产生，节省内存但是耗费较多时间） 可以使用yield关键字来实现迭代，使用yield就是产生了一个生成器，每次遇到yield时函数会暂停并保存当前所有的运行信息，返回yield的值，并在下一次执行此方法是从当前位置开始运行 可以定义元组，其相当于不能修改的数组，一个元组中的元素数据类型可以不同，定义元组使用t = () 列表和元组可以互相转换 可以定义集合，定义集合可以使用set = {}，元组可以转换为集合 字典类似于数组，但是它是由多组键值对组成的 19/9/19 使用class关键字定义类，再在类中定义函数，如：class 类名(object) __init__函数是用于在创建对象时进行的初始化操作 self是类的本身，是它的实例变量，在类中所有函数的第一个参数就是self，在类中修改属性值需使用self.属性值 = x的语法 实例化类的方法：对象名 = 类名(初始化函数参数) 对象中方法的引用可以采用对象.方法（也即函数）的语句，通过此方式向对象发送消息 Python中，属性和方法的访问权限只有public和private，若希望属性或方法是私有的，在给它们命名的时候要使用__开头，但是不建议将属性设置为私有的 使用_开头暗示属性或方法是受保护(protected)的，访问它们建议通过特定的方法，但实际上它们还是可以直接被外部访问 可以通过在类中定义方法以访问对象受保护的属性，在定义这些方法（函数）时，要在上一行使用@property包装这些方法 对于被保护的属性，在访问它们时采用getter方法，需添加@property，在修改它们时采用setter方法，需添加@函数（即方法）名.setter Python可以对对象动态绑定新的属性或方法 可以使用__slots__限定对象只能绑定某些属性，但是它只对当前类的对象生效，对子类不起作用 可以通过给类发送消息，在类的对象被创建出来之前直接使用其中的方法，此种方法被称为静态方法，需要在定义时添加@staticmethod，此类方法的参数不含有self 通过类方法可以获取类相关的信息并且可以创建出类的对象，需要在定义时添加@classmethod，类方法的第一个参数是cls，这个cls相当于就是在外部实例化类时定义的对象名，只不过它是放在类的内部使用了，其功能就是可以像在外部调用对象的属性和方法一样在类的内部使用对象（类）的属性和方法 19/9/20 类之间的关系： is-a：继承或者泛化，如：student is a human being，cell phone is a electronic device has-a：关联，如 department has an employee use-a：依赖，如 driver use a car 类与类之间可以继承，提供继承信息的成为父类（超类或者基类），得到继承的称为子类（派生类或者衍生类） Python中继承的写法：class 子类名(基类名) 在编程中一般使用子类去替代基类 在子类中，通过重新定义父类中的方法，可以让同一种方法在不同的子类中有不同的行为，这称为重写 20/1/11 Python中提供两个重要的功能：异常处理和断言（Assertions）来处理运行中出现的异常和错误，他们的功能是用于调试Python程序 异常：无法正常处理程序时会发生异常，是一个对象，如果不捕获异常，程序会终止执行 Python中异常处理的写法： 12345678try: #operation1except exception_type, argument: #if error occurs in operation1, execute operation2 #operation2else: #if no error occurs in operation1, execute operation3 #operation3 使用except可以不带异常类型，但是会让try-except语句捕获所有的异常，不建议这样写 可以使用expect(exception1[, expection2[, expection3]])来添加多个异常类型 argument为异常的参数，可以用于输出异常信息的异常值 也可以使用如下方法，但是与try-except有所不同： 1234try: #operation1finally: #in error occurs in operation1, directly execute operation2, otherwise, execute operation2 after operation1 finished finally和except不可以同时使用 可以使用raise触发异常 append()方法用于在列表末尾添加新的对象，对于一个数组list，可以这样使用：list.append() 多线程用于同时执行多个不同的程序，可以把占据长时间的程序中的任务放到后台处理 线程与进程：独立的线程有自己的程序入口、执行序列、程序出口，但是线程不可以独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制 在Python中使用线程：thread.start_new_thread(function, args[, kwargs])，其中function为线程函数，这个函数需要提前定义好，args为传递给线程函数的参数，是一个元组，kwargs为可选参数，此种方式称为函数式，线程的结束一般靠函数的自然结束 此外还可以使用Python所提供的threading模块，直接从threading.Thread继承：class myThread(threading.Thread)，然后重写__init__和run方法，把需要执行的代码写到run方法里面，__init__的重写方法如下： 12345def __init__(self, threadID, name, counter): threading.Thread.__init__(self) self.threadID = threadID self.name = name self.counter = counter 上述thread类提供了以下方法： run()：表示线程活动的方法 start：启动线程 join()：等待直到线程终止 isAlive()：查询线程是否活动 getName()：返回线程名 setName()：设置线程名 为了避免两个或多个线程同时运行，产生冲突，可以使用线程锁来控制线程执行的优先顺序，被锁定的线程优先执行，其他进程必须停止 可以使用threading.Lock().acquire()和threading.Lock().release()来锁定和释放线程 可以建立一个空数组用于存放线程，再通过append方法将线程添加至该数组中，通过遍历数组可以对其中的线程做一样的操作 20/1/13 在继承的时候，","link":"/2020/01/06/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"华为云+nginx服务器搭建总结","text":"由于自己是去年七月配置好的服务器，有一些细节或者遇到的问题已经记不太清，故本文可能会有不完整的地方，遇到问题请善用搜索引擎，而且服务器的配置方法也不只有这一种。本文主要用作对自己操作步骤和方法的一个总结，以便于日后查阅。本文章将持续更新。 购买服务器首先去华为云官网注册一个账号。如果是学生，可以搜索“学生”，并进行学生认证。学生认证的步骤参见学生认证流程。进行身份验证后可以购买学生优惠套餐，云服务器价格只要99元/年，比阿里云和腾讯云的都要便宜一些。 购买完成后，你可以在控制台看到自己现有的资源以及运行情况。 配置安全组 安全组是一个逻辑上的分组，为具有相同安全保护需求并相互信任的云服务器提供访问策略。安全组创建后，用户可以在安全组中定义各种访问规则，当云服务器加入该安全组后，即受到这些访问规则的保护。 系统会为每个用户默认创建一个默认安全组，默认安全组的规则是在出方向上的数据报文全部放行，入方向访问受限，安全组内的云服务器无需添加规则即可互相访问。默认安全组可以直接使用。 安全组创建后，你可以在安全组中设置出方向、入方向规则，这些规则会对安全组内部的云服务器出入方向网络流量进行访问控制，当云服务器加入该安全组后，即受到这些访问规则的保护。^1 在控制台点击“弹性云服务器ECS”，在这里你可看到你的服务器的公网IP，请记下这个IP地址。然后点击在列表中点击你的服务器的名称。 进入云服务器管理页面后，点击“安全组”。再点击“Sys-default”可以看到默认安全组。然后下面给出的图片是我目前的安全组设置，仅供参考。选择“入/出方向方向规则”，再点击“添加规则“即可手动添加规则。一般来说，配置的都是入方向的安全组，并且源地址（访问服务器的设备的IP地址）都为“0.0.0.0/0”（所有IP地址）。 通常需要配置如下几个功能： SSH远程连接Linux弹性云服务器（协议：SSH，端口：22） 公网“ping”ECS弹性云服务器（协议：ICMP，端口：全部） 弹性云服务器作Web服务器 协议：http，端口：80 协议：https，端口：433 详细配置请参考安全组配置示例。 配置完成后，可以打开电脑上的终端，用下面的语句测试一下： ping 你的公网IP 出现类似下面的内容就代表成功了： 你可以按下Ctrl+C来结束ping这个进程。 然后在终端里输入： ssh 你的公网IP 如果你的安全组配置正确的话，会让你输入服务器的登录密码。输入密码（注意：密码是不会显示的）后回车，应该可以看到这样的输出： 这个时候，你的终端就已经连接上了服务器的系统了，你在终端里的一切操作都是作用在服务器上的。 在服务器上安装nginx首先请在终端使用ssh登录你的服务器，然后按照下面给出的顺序输入命令。 12345678910yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel #安装编译工具及库文件cd /usr/local/ #切换到目标安装文件夹wget http://nginx.org/download/nginx-1.16.1.tar.gz #下载最新版本的Nginxtar -zxvf nginx-1.16.1.tar.gz #解压文件cd nginx-1.16.1 #进入解压的文件夹./configure #执行程序make #编译make install #安装cd /usr/local/nginx/sbin #进入Nginx安装目录./nginx #运行Nginx 此时，安装应该已经完成了。打开浏览器，在地址栏中输入你的公网ip。如果看到下图所示内容，就代表安装成功了。 创建属于你自己的域名在拥有了自己的服务器以后，就可以做很多事情了。但是现在你只能通过IP地址访问自己的服务器，看起来总是有点别扭。另外，如果你想要网站有一定的影响力的话，仅有IP地址会让人几乎找不到你的网站，而且也不符合国家法律规定。所以还是建议大家弄一个自己的域名。 现在市面上的云服务器提供商也都提供域名注册的服务，直接在你的服务提供商的平台上面注册即可。下面我继续用华为云的平台演示。 首先在华为云网站页面的导航栏的搜索框内搜索“域名”，打开第一个链接“域名注册服务”。也可以直接点击这里：域名注册服务_华为云。 然后你可以在网页中选择你的域名，常见的如.com，.cn，.net等。这些域名会相对比较贵。作为学生党，我选择一个最便宜的域名.top，只需要9元/年。 点击你想要的域名后，会跳转到一个新的页面。接下来再次选择你要的域名，并且在“查域名”的搜索框内输入你想要的域名，看看是否已经被占用，如果被占用了就换一个。若显示“域名可注册”，就点击“立即购买”。 购买完成后，你就拥有了自己域名了！ 备案 备案是中国大陆的一项法规，使用大陆节点服务器提供互联网信息服务的用户，需要在服务器提供商处提交备案申请。 根据工信部《互联网信息服务管理办法》(国务院292号令)和工信部令第33号《非经营性互联网信息服务备案管理办法》规定，国家对经营性互联网信息服务实行许可制度，对非经营性互联网信息服务实行备案制度。未取得许可或者未履行备案手续的，不得从事互联网信息服务，否则属违法行为。通俗来讲，要开办网站必须先办理网站备案，备案成功并获取通信管理局下发的ICP备案号后才能开通访问。^2 这一步不多说了，具体步骤比较繁琐，花费的时间也比较长，需要一两周。网站上有很清晰的操作方法，请自行查阅，根据步骤操作即可。需要注意一点的是，在审核过程中可能会接到服务提供商打来的电话，不要漏接。 需要注意的是，上面的备案操作是在工信部备案的。完成了在工信部的备案以后还需要公安备案。具体操作方法也请自行查阅。 域名解析在完成一系列繁琐的备案流程以后，你的网站还不可以通过域名访问。只有把你的域名跟服务器的IP地址绑定在一起之后，并且在服务器上修改了配置文件之后才可以。 首先打开管理控制台，在控制台中选择“域名注册”。然后在下面的页面中点击“解析”。 点击你的域名，显示如下页面。这里显示的是你域名的记录集，前两个记录集应该是预置设置，不可暂停服务。你可以在这基础上添加自己的记录集。 点击页面右上角红色按钮以添加记录集。添加记录集的配置如下图所示。下图中给出的例子是添加的“A”型记录集，也即通过example.com访问网站。若需要通过www.example.com访问网站，则需要为example.com的子域名添加“A”型记录集。具体配置参见：配置网站解析_华为云。点击“确定”，完成添加。你可以通过ping 你的域名来测试你添加的记录集是否生效了。 配置nginx打开你电脑上的终端，输入命令：ssh 你的IP地址，输入你的服务器的密码。 进入你的nginx的安装目录：cd /usr/local/nginx/。 使用vim打开nginx的配置文件：vim ./conf/nginx.conf。 按I开始输入。 在最后一个大括号前插入以下内容： 123456server { listen 80; #监听端口设为 80 server_name example.com; #绑定您的域名 index index.htm index.html; #指定默认文件 root html; #指定网站根目录} 然后按esc退出编辑，再按Shift+zz保存。 输入：cd ./sbin，切换文件夹。 执行命令：nginx -s relod，重启nginx服务。 这时候再尝试用浏览器访问你的域名，应该会显示之前出现过的“Welcome to nginx ”的页面了！ 申请SSL证书SSL证书可以在数据传输的过程中对其进行加密和隐藏，可以极大地提高数据传输的安全性。拥有SSL证书的网站的请求头都是https，并且在链接旁边会出现一把小锁。但是，SSL证书并不是所有网站都必须的，这视你的需要而定。比如，微信小程序的服务器就必须要有域名和SSL证书。另外，出于信息传输的安全性方面的考虑，有SSL证书还是显得更为妥当和专业一点。 现在市面上各大云服务器提供商也都提供配套的SSL证书申请服务，一般都是提供企业级的证书，价格比较昂贵。但是同时网络上也有一些免费的SSL证书服务可以选择。下面还是以华为云的平台为例，简单说明一下如何申请SSL证书。 首先在华为云页面的导航栏的搜索框内搜索“免费证书“，然后点击亚洲诚信域名型DV单域名SSL证书–免费证书，可以看到证书的价格是0.00元。点击“立即购买”。 完成购买后请不要立即关闭页面，页面中的订单号在之后还需要用到。尔后，系统会发送”HuaweiCloud账户申请”邮件至用户邮箱，即你在华为云的注册邮箱。 点击邮件中的登录地址进入系统，并使用邮件提供的账号和初始密码进行登录。登入系统后请修改你的初始密码，然后请根据华为云中给你提供的订单号在该系统中查询你的订单。查询到你的订单以后，需要你补充一些信息，请如实填写。系统会要你填写公司信息，如果只是个人网站，那么公司名称直接填写你的名字即可，公司地址就填写你的住址。 填写完成后会进入审核阶段，系统会给你发送一封邮件。 根据邮件的提示，需要在记录集中添加新的内容。请根据前文所述方法，将邮件中的内容添加至新的记录集。填写方法如下图所示。 填写完成后，可以在本地电脑的终端里输入nslookup -querytype=txt 你的域名来测试记录集是否生效。 一般来说，记录集生效后10分钟以内证书就会颁发了。 SSL证书部署接下来我们要把SSL证书部署到我们的服务器上。 在收到的“证书颁发”的邮件的底部有一条链接，点击这条链接，进入证书管理系统。登录系统，在左侧导航栏中点击“SSL证书”，再点击“预览”，再在右侧的“信息预览”中点击“下载最新证书“。 在弹出的对话框内，选择证书格式为“PEM(适用于Nginx,SLB)”，输入你的订单密码。证书密码可以留空。 下载完成后，解压下载的压缩包，需要输入你的订单密码（如果你没有设置证书密码）。解压以后可以得到下图两个文件。 接下来，打开你的终端，按顺序输入下列命令： 123456ssh 你的公网IP #ssh登录，输入你的密码cd /usr/local/nginx #切换到nginx的安装目录mkdir ./cert #创建一个新文件夹cert用于存放你的证书exit #断开与服务器的连接scp 文件的路径/你的域名.key 你的服务器用户名@你的服务器IP地址:./cert #将.key文件上传到你的服务器的指定目录下scp 文件的路径/你的域名.crt 你的服务器用户名@你的服务器IP地址:./cert #将.crt文件上传到你的服务器的指定目录下 接下来我们需要修改nginx的配置文件。参考前文所述方法打开nginx的配置文件。先将你之前插入的内容删除或者使用#注释掉，然后在最后一个大括号前插入以下内容： 1234567891011121314151617181920212223server { listen 443 ssl; server_name example.com; #你证书绑定的域名; ssl_certificate /usr/local/nginx/cert/你的域名.crt; ssl_certificate_key /usr/local/nginx/cert/你的域名.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { index index.htm index.html; #指定默认文件。 root html; #指定网站根目录。 }}server { #将你的80端口重定向至433端口，即强制使用https访问 listen 80; server_name; example.com; #你的域名 rewrite ^/(.*)$ https://example.com:443/$1 permanent;} 将文件保存以后重启nginx服务。 重启以后你可能会遇到这样的问题：**unknown directive “ssl” in /usr/local/nginx/conf/nginx.conf:121**，这是因为你在安装nginx时，没有编译SSL模块。你可以在终端里按照下述步骤解决^ 3： 1234567cd ../nginx-1.16.1 #进入到nginx的源码包的目录下./configure --with-http_ssl_module #带参数执行程序make #编译cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx_bak #备份旧的nginxcp ./objs/nginx /usr/local/nginx/sbin/ #然后将新的nginx的程序复制一份cd /usr/local/nginx/sbin/ #切换到sbin目录./nginx -s reload #重启nginx服务 如果重启成功的话，打开浏览器访问你的域名，这时候应该可以在链接旁边看到一个小锁了！","link":"/2020/01/08/%E5%8D%8E%E4%B8%BA%E4%BA%91+nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/"},{"title":"Summarize of Reinforcement Learning 3","text":"IntroductionIn the previous article we talked about MP, MRP, MDP and how to find the best policy. All the discussions are based on the fact that we know both the rewards and probabilities for every transition. However, in many cases such information is not readily available to us. Therefore, we are going to discuss model-free algorithms in this article. Throughout this article, we will assume an infinite horizon as well as stationary rewards, transition probabilities and policies. First comes the definition of history: the history is the ordered tuple of states, actions and rewards that an agent experiences. The $j$ th history is: $h_j=(s_{j,1},a_{j,1},r_{j,1},s_{j,2},a_{j,2},r_{j,2},…,s_{j,L_j})$, where $L_j$ is the length of the interaction (interaction between agent and environment). In the article Summarize of Reinforcement Learning 2 I introduced the iterative solution of value function, which is $V_t(s)=\\Bbb E_\\pi[R_{t+1}+\\gamma V_\\pi (s_{t+1})|s_t=s]$ ​ $=R(s)+\\gamma \\sum P(s’|s)V_{t+1}(s’), \\forall t=0,…,H-1,V_H(s)=0$. This ia a bootstraping process, and we estimate the value of the next state using our current estimate of next state. Monte Carlo on policy evaluationIn general, we got the Monte Carlo estimate of some quantity by iterations of how that quantity is generated either in real life or via simulation and then averaging over the observed quantities. By the law of large numbers, this average converges to the expectation of the quantity. In reinforcement learning the quantity we want to estimate is $V^\\pi(s)$ and we can get it through three steps: Execute a rollout of policy until termination many times Record the returns $G_t$ that we observe when starting at state $s$ Take an average of the values we got for $G_t$ to estimate $V^\\pi(s)$. Figure 1 shows a backup diagram for the Monte Carlo policy evaluation algorithm. And you can find that, unlike what we have talked about in the second article, Monte Carlo on policy evaluation is not a bootstraping process. How to evaluate the good and bad of an algorithmWe use three quntities to evaluate the good and bad of an algorithm. Consider a statistical model that is parameterized by $\\theta$ and that determins a probability distribution over oberserved data $P(x|\\theta)$. Then consider a statistic $\\hat\\theta$ that provides an estimate of $\\theta$ and it’s a function of observed data $x$. Then we have these quantities of the estimator: Bias: $Bias_\\theta(\\hat\\theta)=\\Bbb E\\rm_{x|\\theta}[\\hat\\theta]-\\theta$, Variance: $Var(\\hat\\theta)=\\Bbb E\\rm_{x|\\theta}[(\\hat\\theta-\\Bbb E\\rm[\\hat\\theta])^2]$, Mean squared error (MSE): $MSE(\\hat\\theta)=Var(\\hat\\theta)+Bias_\\theta(\\hat\\theta)$. First-Visit Monte CarloHere is the algorithm of First-Visit Monte Carlo: Initialize $N(s)=0,\\ G(s)=0,\\ V(s)=0,\\ \\forall s\\in S$ $N(s)$: Increment counter of total first visits $G(s)$: Increment total return $V(s)$: Estimate while each state $s$ visited in episode $i$ do ​ while first time $t$ that the state $s$ is visited in episode $h_i$ do ​ $N(s)=N(s)+1$ ​ $G(s)=G(s)+G_{i,t}$ ​ $V(s)=G(s)/N(s)$ return $V(s)$ First-Visit Monte Carlo estimator is an unbised estimator. Every-Visit Monte CarloHere is the algorithm of Every-Visit Monte Carlo: Initialize $N(s)=0,\\ G(s)=0,\\ V(s)=0,\\ \\forall s\\in S$ $N(s)$: Increment counter of total first visits $G(s)$: Increment total return $V(s)$: Estimate while each state $s$ visited in episode $h_i$ do ​ while every time $t$ that the state $s$ is visited in episode $i$ do ​ $N(s)=N(s)+1$ ​ $G(s)=G(s)+G_{i,t}$ ​ $V(s)=G(s)/N(s)$ return $V(s)$ Every-Visit Monte Carlo is a bised estimator becaue the varibles are not IID (Independently Identicaly Distribution). But it has a lower variance which is better than First-Visit Monte Carlo. Increment First-Visit/Every-Visit Monte CarloWe can replace $V(s)=G(s)/N(s)$ in both two algorithms by $V(s)=V(s)+{1\\over N(s)}(G(s)-V(s))$. Because ${V(s)(N(s)-1)+G(s)\\over N(s)}=V(s)+{1\\over N(s)}(G(s)-V(s))$. Replacing $1\\over N(s)$ with $\\alpha$ in the upper expression gives us the more general Incremental Monte Carlo on policy evaluation. Setting $\\alpha &gt; {1\\over N(s)}$ gives higher weight to newer data, which can help learning in non-stationary domains. Temporal Difference (TD) LearningTD learning is a new algorithm that combines bootstraping with sampling. It is still model-free, and it will update its value after every observation. In dynamic programming, the return is witten as $r_t+\\gamma V^\\pi(s_{t+1})$, where $r_t$ is a sample of the reward at time step $t$ and $V^\\pi(s_{t+1})$ is our current estimate of the value at the next state. We can use the upper expression to replace the $G(s)$ in the incremental Monte Carlo update and then we have $V^\\pi(s_t)=V^\\pi(s_t)+\\alpha(r_t+\\gamma V^\\pi(s_{t+1})-V^\\pi(s_t))$, and this is the TD learning update. In TD learning update, there are two concepts which are TD error and TD target. TD error is written as below: $\\delta_t=r_t+\\gamma V^\\pi(s_{t+1})-V^\\pi(s_t)$. And here is TD target, which is the sampled reward combined with the bootstrap estimate of the next state value: $r_t+\\gamma V^\\pi(s_{t+1})$. The algorithm of TD learning is shown below. Initialize $V^\\pi(s)=0,\\ s\\in S$ while True do ​ Sample tuple $(s_t,a_t,r_t,s_{t+1})$ ​ $V^\\pi(s_t)=V^\\pi(s_t)+\\alpha(r_t+\\gamma V^\\pi(s_{t+1})-V^\\pi(s_t))$ It is improtance to aware that $V^\\pi(s_{t+1})$ is the current value (estimate) of the next state $s_{t+1}$ and you can get the exact state at the following next time step. Only at that time can you know what the exact $s_{t+1}$ is and then use the current (you can also regard it as the previous one because it remains the same value at $s_t$) estimate $V^\\pi(s_{t+1})$ to calculate the value of $s_t$. Thus that’s why it is called the combination of Monte Carlo and dynamic programming due to the sampling (to approximate the expectation) and bootstraping process. In reality, if you set $\\alpha$ equals to ${1\\over N}$ or a very small value, the algorithm will converge definitely. On the contrary, it will oscilate when $\\alpha=1$, which means you just ignore the former estimate. Figure 2 shows a diagram expressing TD learning. SummaryTable below gives some fundamental properties of these three algorithms (DP, MC, TD). Properties DP MC TD Useble when no models of current domain No Yes Yes Handles continuing domains (episodes will never terminate) Yes No Yes Handles Non-Markovian domains No Yes No Coverges to true value in limit (satisfying some conditions) Yes Yes Yes Unbised estimate of value N/A Yes (First-Visit MC) No Variance N/A High Low Figure 3 shows some other properties that may help us to choose the algorithm. Batch Monte Carlo and Temporal DifferenceThe batch versions of the algorithms is that we have a set of histories that we use to make updates many times and we can use the dataset many times in order to have a better estimate. In the Monte Carlo batch setting, the calue at each state converges to the value that minimizes the mean squarred error with the observed returns. While in the TD setting, we converge to the value $V^\\pi$ that is the value of policy $\\pi$ on the maximum likelihood MDP model, where . The value function derived from the maximum likehood MDP model is known as the certainty equivalence estimate. Using this relationship, we can first compute the maximum likelihoood MDP model using the batch. Then we can compute $V^\\pi$ using this model and the model-based policy evaluation methods. This method is highly data efficient but is computationally expensive.","link":"/2020/02/01/RLSummarize3/"}],"tags":[{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Hackintosh","slug":"Hackintosh","link":"/tags/Hackintosh/"},{"name":"Astrobear","slug":"Astrobear","link":"/tags/Astrobear/"},{"name":"Life","slug":"Life","link":"/tags/Life/"},{"name":"Others","slug":"Others","link":"/tags/Others/"},{"name":"Photos","slug":"Photos","link":"/tags/Photos/"},{"name":"Astrophotography","slug":"Astrophotography","link":"/tags/Astrophotography/"},{"name":"AirSim","slug":"AirSim","link":"/tags/AirSim/"},{"name":"Research","slug":"Research","link":"/tags/Research/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"RL","slug":"RL","link":"/tags/RL/"},{"name":"HP","slug":"HP","link":"/tags/HP/"},{"name":"Programming Language","slug":"Programming-Language","link":"/tags/Programming-Language/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"Internet server","slug":"Internet-server","link":"/tags/Internet-server/"},{"name":"Network Technology","slug":"Network-Technology","link":"/tags/Network-Technology/"},{"name":"Experience","slug":"Experience","link":"/tags/Experience/"}],"categories":[{"name":"Hackintosh","slug":"Hackintosh","link":"/categories/Hackintosh/"},{"name":"Others","slug":"Others","link":"/categories/Others/"},{"name":"CS","slug":"CS","link":"/categories/CS/"}]}